SET SERVEROUTPUT ON;
SET VERIFY OFF;

--Named System Exceptions
--NO_DATA_FOUND

DECLARE
	A money.taka%TYPE;
	
BEGIN
	SELECT taka into A from money where id=5;   -- no id 5 in db

EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('DATA NOT FOUND');
END;
/



--TOO_MANY_ROWS

DECLARE
	A money.taka%TYPE;
	
BEGIN
	SELECT taka into A from money;
	
EXCEPTION
	WHEN TOO_MANY_ROWS THEN
		DBMS_OUTPUT.PUT_LINE('MANY ROWS DETECTED');
	
END;
/



DECLARE
	A money.taka%TYPE;
	
BEGIN
	
	SELECT taka into A from money where id=5;

EXCEPTION
	WHEN TOO_MANY_ROWS THEN
		DBMS_OUTPUT.PUT_LINE('MANY ROWS DETECTED');
		
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('DATA NOT FOUND');
		
END;
/



--Default exception handler OTHERS

DECLARE
	A money.taka%TYPE;
	B NUMBER := 0;
	val number;
	
BEGIN	
	SELECT taka into A from money where id=1;
	val:= A/B;

EXCEPTION
	WHEN TOO_MANY_ROWS THEN
		DBMS_OUTPUT.PUT_LINE('MANY ROWS DETECTED');
		
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('DATA NOT FOUND');
	
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('OTHER ERRORS FOUND');  --1/0
	
END;
/


--ZERO_DIVIDE

DECLARE
	A money.taka%TYPE;
	B NUMBER := 0;
	val number;
	
BEGIN
	
	SELECT taka into A from money where id=1;
	val:= A/B;

EXCEPTION
	WHEN TOO_MANY_ROWS THEN
		DBMS_OUTPUT.PUT_LINE('MANY ROWS DETECTED');
		
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('DATA NOT FOUND');
	
	WHEN ZERO_DIVIDE THEN
		DBMS_OUTPUT.PUT_LINE('CANNOT DIVIDE BY ZERO');
	
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('OTHER ERRORS FOUND');
	
END;
/